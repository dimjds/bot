import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
import nest_asyncio
import re  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email

# –†–∞–∑—Ä–µ—à–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)

# –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google –¢–∞–±–ª–∏—Ü—É
spreadsheet_url = 'https://docs.google.com/spreadsheets/d/1c6BT-To7vZ9rSZ3ucdD66pIUFWIOxd73NThNF5AAVKc/edit?hl=ru&gid=0'
spreadsheet_id = spreadsheet_url.split('/d/')[1].split('/')[0]
spreadsheet = client.open_by_key(spreadsheet_id)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
CHOOSING_DAY, CHOOSING_TIME, TYPING_NAME_SURNAME, TYPING_PHONE, TYPING_EMAIL, CHOOSING_ACTION = range(6)

async def delete_if_exists_on_all_sheets(user_id):
    days = ['–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥']
    rows_to_delete = []

    for day in days:
        try:
            sheet = spreadsheet.worksheet(day)
            cells = sheet.findall(str(user_id))  # –ò—â–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ —Å user_id
            for cell in cells:
                rows_to_delete.append((sheet, cell.row))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏—Å—Ç –∏ —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                print(f"–ù–∞–π–¥–µ–Ω ID {user_id} –Ω–∞ –ª–∏—Å—Ç–µ {day} –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}")
        except gspread.exceptions.WorksheetNotFound:
            print(f"–õ–∏—Å—Ç {day} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º user_id
    for sheet, row in rows_to_delete:
        sheet.delete_rows(row)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ delete_rows
        print(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row} —Å ID {user_id} –Ω–∞ –ª–∏—Å—Ç–µ {sheet.title}")

    if not rows_to_delete:
        print(f"ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"–ó–∞–ø—É—Å–∫ /stop –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
        return

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    await update.message.reply_text("–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±–æ—Ç–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –±–µ—Å–µ–¥—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    print(f"–ó–∞–ø—É—Å–∫ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")

    await delete_if_exists_on_all_sheets(user_id)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ user_id

    keyboard = [
        [InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data='Wednesday')],
        [InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data='Thursday')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ Interview –≤ Moldcell Academy üòé. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=reply_markup)

    return CHOOSING_DAY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
async def choose_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    day_response = query.data

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    day_mapping = {'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥'}
    russian_day = day_mapping.get(day_response, day_response)

    context.user_data['day'] = day_response  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: *{russian_day}* üìÖ.", parse_mode='Markdown')

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    if day_response == 'Wednesday':
        keyboard = [
            [InlineKeyboardButton("13:30", callback_data='13:30'),
             InlineKeyboardButton("13:45", callback_data='13:45')],
            [InlineKeyboardButton("14:00", callback_data='14:00'),
             InlineKeyboardButton("14:15", callback_data='14:15')],
            [InlineKeyboardButton("17:00", callback_data='17:00'),
             InlineKeyboardButton("17:15", callback_data='17:15')],
            [InlineKeyboardButton("17:30", callback_data='17:30'),
             InlineKeyboardButton("17:45", callback_data='17:45')],
            [InlineKeyboardButton("18:00", callback_data='18:00')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞", callback_data='cancel')]
        ]
    elif day_response == 'Thursday':
        keyboard = [
            [InlineKeyboardButton("14:00", callback_data='14:00'),
             InlineKeyboardButton("14:15", callback_data='14:15')],
            [InlineKeyboardButton("14:30", callback_data='14:30'),
             InlineKeyboardButton("14:45", callback_data='14:45')],
            [InlineKeyboardButton("15:00", callback_data='15:00')],
            [InlineKeyboardButton("15:15", callback_data='15:15')],
            [InlineKeyboardButton("15:30", callback_data='15:30')],
            [InlineKeyboardButton("15:45", callback_data='15:45')],
            [InlineKeyboardButton("16:00", callback_data='16:00')],
            [InlineKeyboardButton("16:15", callback_data='16:15')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞", callback_data='cancel')]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)

    return CHOOSING_TIME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    user_response = query.data

    if user_response == 'cancel':
        await query.message.reply_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
        return ConversationHandler.END

    day = context.user_data['day']
    day_mapping = {'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥'}
    russian_day = day_mapping.get(day, day)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    try:
        sheet = spreadsheet.worksheet(russian_day)
    except gspread.exceptions.WorksheetNotFound:
        # –°–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞: {russian_day}")
        sheet = spreadsheet.add_worksheet(title=russian_day, rows="100", cols="4")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–≤—Ä–µ–º–µ–Ω–∏)
    occupied_times = sheet.col_values(1)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ
    count = occupied_times.count(user_response)

    if count >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ 3 –∏–ª–∏ –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π
        await query.message.reply_text(f"–í—Ä–µ–º—è {user_response} —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", parse_mode='Markdown')
        return CHOOSING_TIME

    context.user_data['time'] = user_response
    await query.message.reply_text(f"‚åö –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: *{user_response}*.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ *–ø—Ä–æ–±–µ–ª* –ø–æ —Ç–∏–ø—É: –ò–º—è –§–∞–º–∏–ª–∏—è", parse_mode='Markdown')

    return TYPING_NAME_SURNAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
async def receive_name_surname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name_surname_response = update.message.text.split(maxsplit=2)
    
    if len(name_surname_response) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ *–ø—Ä–æ–±–µ–ª* –ø–æ —Ç–∏–ø—É: –ò–º—è –§–∞–º–∏–ª–∏—è", parse_mode='Markdown')
        return TYPING_NAME_SURNAME

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å–ª–æ–≤–∞
    name_response = name_surname_response[0]
    surname_response = name_surname_response[1]
    
    context.user_data['name'] = name_response
    context.user_data['surname'] = surname_response
    await update.message.reply_text(f"–í–∞—à–µ –∏–º—è: *üìù {name_response}*.\n–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: *üìù{surname_response}*.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ —Ç–∏–ø—É: 060123467", parse_mode='Markdown')

    return TYPING_PHONE

async def receive_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_response = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä
    if not phone_response.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return TYPING_PHONE

    # –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞
    if len(phone_response) < 7:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞
        await update.message.reply_text("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return TYPING_PHONE

    context.user_data['phone'] = phone_response

    day = context.user_data['day']  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    russian_day = {'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥'}.get(day)

    if not russian_day:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–µ–Ω—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return ConversationHandler.END

    try:
        sheet = spreadsheet.worksheet(russian_day)  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç
    except gspread.exceptions.WorksheetNotFound:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ª–∏—Å—Ç {russian_day} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await update.message.reply_text(f"üì± –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{phone_response}*.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à E-mail –ø–æ —Ç–∏–ø—É: example@gmail.com", parse_mode='Markdown')

    return TYPING_EMAIL

async def receive_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email_response = update.message.text

    if not is_valid_email(email_response):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.")
        return TYPING_EMAIL

    context.user_data['email'] = email_response
    day = context.user_data['day']
    russian_day = {'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥'}.get(day)

    if not russian_day:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–µ–Ω—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return ConversationHandler.END

    try:
        sheet = spreadsheet.worksheet(russian_day)
    except gspread.exceptions.WorksheetNotFound:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ª–∏—Å—Ç {russian_day} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º email
    await update.message.reply_text(f"üì¨ –í–∞—à email: *{email_response}*.", parse_mode='Markdown')

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: –í—Ä–µ–º—è: {context.user_data['time']}, –ò–º—è: {context.user_data['name']}, –§–∞–º–∏–ª–∏—è: {context.user_data['surname']}, –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}, Email: {context.user_data['email']}, ID: {update.effective_user.id}")

    # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–µ–º –≤—ã–±–æ—Ä
    data_summary = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üìÖ –î–µ–Ω—å: *{russian_day}*\n" 
        f"‚åö –í—Ä–µ–º—è: *{context.user_data['time']}*\n"
        f"üìù –ò–º—è: *{context.user_data['name']}*\n"
        f"üìù –§–∞–º–∏–ª–∏—è: *{context.user_data['surname']}*\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: *{context.user_data['phone']}*\n"
        f"üì¨ Email: *{context.user_data['email']}*\n"
    )

    await update.message.reply_text(data_summary, parse_mode='Markdown')

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='send_data')],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='rewrite_data')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    return CHOOSING_ACTION

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    russian_day = {'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞', 'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥'}.get(context.user_data['day'])

    if query.data == 'send_data':
        row = [context.user_data['time'], context.user_data['name'], context.user_data['surname'], context.user_data['phone'], context.user_data['email'], update.effective_user.id]

        try:
            sheet = spreadsheet.worksheet(russian_day)
            sheet.append_row(row)
            await query.message.reply_text("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start.")
            await query.message.reply_text("–í—Å–∫–æ—Ä–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à email –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é. üöÄ")
            print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: –í—Ä–µ–º—è: {context.user_data['time']}, –ò–º—è: {context.user_data['name']}, –§–∞–º–∏–ª–∏—è: {context.user_data['surname']}, –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}, Email: {context.user_data['email']}, –î–µ–Ω—å: {russian_day}, ID: {update.effective_user.id}")
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            print(f"–û—à–∏–±–∫–∞: {e}")

    elif query.data == 'rewrite_data':
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö.")
        await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    context.user_data.clear()
    return ConversationHandler.END

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start_command)],
    states={
        CHOOSING_DAY: [CallbackQueryHandler(choose_day)],
        CHOOSING_TIME: [CallbackQueryHandler(button_callback)],
        TYPING_NAME_SURNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name_surname)],
        TYPING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_phone)],
        TYPING_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_email)],
        CHOOSING_ACTION: [CallbackQueryHandler(handle_action)],
    },
    fallbacks=[
        CommandHandler('stop', stop_command),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /stop
    ],
)

if __name__ == '__main__':
    application = ApplicationBuilder().token("7713019096:AAGEpMBsD8SCeIWiH-Q7lcnJF2Sd2An1fzg").build()
    application.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()
